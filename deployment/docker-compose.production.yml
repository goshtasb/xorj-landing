# XORJ Production Docker Compose Configuration
# Complete backend deployment with all services

version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: xorj-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-xorj_bot_state}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - xorj-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-xorj_bot_state}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: xorj-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - xorj-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Quantitative Engine Service
  quantitative-engine:
    build:
      context: ./quantitative-engine
      dockerfile: Dockerfile.production
    container_name: xorj-quantitative-engine
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@database:5432/${DATABASE_NAME:-xorj_bot_state}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - RAYDIUM_API_URL=${RAYDIUM_API_URL}
    depends_on:
      - database
      - redis
    ports:
      - "8001:8001"
    networks:
      - xorj-network
    volumes:
      - ./quantitative-engine/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trade Execution Bot Service
  trade-execution-bot:
    build:
      context: ./trade-execution-bot
      dockerfile: Dockerfile
    container_name: xorj-trade-execution-bot
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@database:5432/${DATABASE_NAME:-xorj_bot_state}
      - REDIS_URL=redis://redis:6379
      - QUANTITATIVE_ENGINE_URL=http://quantitative-engine:8001
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SOLANA_PROGRAM_ID=${SOLANA_PROGRAM_ID}
      - JUPITER_API_URL=${JUPITER_API_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - database
      - redis
      - quantitative-engine
    ports:
      - "8002:8002"
    networks:
      - xorj-network
    volumes:
      - ./trade-execution-bot/logs:/app/logs
      - ./trade-execution-bot/keys:/app/keys:ro  # Mount secure key storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Gateway Service
  fastapi-gateway:
    build:
      context: ./trade-execution-bot
      dockerfile: Dockerfile
    container_name: xorj-fastapi-gateway
    restart: unless-stopped
    command: uvicorn fastapi_service:app --host 0.0.0.0 --port 8000 --workers 4
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@database:5432/${DATABASE_NAME:-xorj_bot_state}
      - REDIS_URL=redis://redis:6379
      - TRADE_EXECUTION_BOT_URL=http://trade-execution-bot:8002
      - QUANTITATIVE_ENGINE_URL=http://quantitative-engine:8001
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - database
      - redis
      - quantitative-engine
      - trade-execution-bot
    ports:
      - "8000:8000"
    networks:
      - xorj-network
    volumes:
      - ./trade-execution-bot/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application (Frontend + API)
  nextjs-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: xorj-nextjs-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME:-xorj_bot_state}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_SSL=false
      - REDIS_URL=redis://redis:6379
      - NEXT_PUBLIC_FASTAPI_GATEWAY_URL=http://fastapi-gateway:8000
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SOLANA_PROGRAM_ID=${SOLANA_PROGRAM_ID}
    depends_on:
      - database
      - redis
      - fastapi-gateway
    ports:
      - "3000:3000"
    networks:
      - xorj-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: xorj-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - nextjs-app
    networks:
      - xorj-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: xorj-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./quantitative-engine/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - xorj-network

  grafana:
    image: grafana/grafana:latest
    container_name: xorj-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./quantitative-engine/monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
      - ./quantitative-engine/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - xorj-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  xorj-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16