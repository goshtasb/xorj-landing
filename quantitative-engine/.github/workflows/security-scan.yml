# XORJ Quantitative Engine - Security Scanning CI/CD Pipeline (SR-4)
# Static Application Security Testing (SAST) and Dependency Vulnerability Scanning

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # SR-4: Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit[toml] safety semgrep

    # Bandit - Security linter for Python
    - name: Run Bandit SAST
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ -f txt -o bandit-report.txt
        
    # Upload Bandit results
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.*

    # Semgrep - Advanced SAST tool
    - name: Run Semgrep
      id: semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/
        semgrep --config=auto --text --output=semgrep-report.txt app/
      continue-on-error: true

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: semgrep-results
        path: semgrep-report.*

    # CodeQL Analysis - GitHub's SAST
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        config-file: ./.github/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    # Fail build on critical security issues
    - name: Evaluate security scan results
      run: |
        echo "Checking for critical security issues..."
        
        # Check Bandit results
        if [ -f bandit-report.json ]; then
          HIGH_SEVERITY=$(jq '.metrics."_totals".SEVERITY_HIGH' bandit-report.json)
          if [ "$HIGH_SEVERITY" -gt 0 ]; then
            echo "CRITICAL: Bandit found $HIGH_SEVERITY high-severity issues"
            echo "Build failed due to critical security vulnerabilities"
            exit 1
          fi
        fi
        
        # Check Semgrep results
        if [ -f semgrep-report.json ]; then
          CRITICAL_COUNT=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' semgrep-report.json)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "CRITICAL: Semgrep found $CRITICAL_COUNT critical issues"
            echo "Build failed due to critical security vulnerabilities"
            exit 1
          fi
        fi
        
        echo "No critical security issues found"

  # SR-4: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Safety - Check for known security vulnerabilities
    - name: Install Safety
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check --output safety-report.txt
      continue-on-error: true

    # Pip-audit - Python package vulnerability scanner
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=text --output=pip-audit-report.txt
      continue-on-error: true

    # Upload dependency scan results
    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: safety-report.*

    - name: Upload pip-audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-report.*

    # Snyk vulnerability scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json --json-file-output=snyk-report.json

    - name: Upload Snyk results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: snyk-results
        path: snyk-report.json

    # Evaluate dependency vulnerabilities
    - name: Evaluate dependency scan results
      run: |
        echo "Checking for critical dependency vulnerabilities..."
        
        CRITICAL_FOUND=false
        
        # Check Safety results
        if [ -f safety-report.json ]; then
          VULN_COUNT=$(jq '. | length' safety-report.json)
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "WARNING: Safety found $VULN_COUNT vulnerabilities"
            
            # Check for critical/high severity
            CRITICAL_VULN=$(jq '[.[] | select(.severity == "critical" or .severity == "high")] | length' safety-report.json)
            if [ "$CRITICAL_VULN" -gt 0 ]; then
              echo "CRITICAL: Found $CRITICAL_VULN critical/high severity vulnerabilities"
              CRITICAL_FOUND=true
            fi
          fi
        fi
        
        # Check pip-audit results
        if [ -f pip-audit-report.json ]; then
          PIP_VULN_COUNT=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
          if [ "$PIP_VULN_COUNT" -gt 0 ]; then
            echo "WARNING: pip-audit found $PIP_VULN_COUNT vulnerabilities"
          fi
        fi
        
        # Fail build on critical vulnerabilities
        if [ "$CRITICAL_FOUND" = true ]; then
          echo "Build failed due to critical dependency vulnerabilities"
          exit 1
        fi
        
        echo "No critical dependency vulnerabilities found"

  # SR-4: Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -f Dockerfile.production -t xorj-quantitative-engine:security-test .

    # Trivy container vulnerability scanner
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'xorj-quantitative-engine:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on critical/high vulnerabilities

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # Grype container vulnerability scanner (alternative)
    - name: Install Grype
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Run Grype container scan
      run: |
        grype xorj-quantitative-engine:security-test -o json --file grype-report.json
        grype xorj-quantitative-engine:security-test -o table --file grype-report.txt

    - name: Upload Grype results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: grype-results
        path: grype-report.*

  # SR-4: Secrets Detection
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # TruffleHog - Find secrets in git history
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json --output trufflehog-report.json

    # GitLeaks - Alternative secrets scanner
    - name: Install GitLeaks
      run: |
        wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
        chmod +x gitleaks

    - name: Run GitLeaks
      run: |
        ./gitleaks detect --source . --report-format json --report-path gitleaks-report.json
        ./gitleaks detect --source . --report-format csv --report-path gitleaks-report.csv
      continue-on-error: true

    - name: Upload secrets scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secrets-scan-results
        path: |
          trufflehog-report.json
          gitleaks-report.*

    # Fail on detected secrets
    - name: Evaluate secrets scan
      run: |
        SECRETS_FOUND=false
        
        # Check TruffleHog results
        if [ -f trufflehog-report.json ] && [ -s trufflehog-report.json ]; then
          SECRETS_COUNT=$(jq '. | length' trufflehog-report.json)
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "CRITICAL: TruffleHog found $SECRETS_COUNT verified secrets"
            SECRETS_FOUND=true
          fi
        fi
        
        # Check GitLeaks results
        if [ -f gitleaks-report.json ] && [ -s gitleaks-report.json ]; then
          LEAKS_COUNT=$(jq '. | length' gitleaks-report.json)
          if [ "$LEAKS_COUNT" -gt 0 ]; then
            echo "CRITICAL: GitLeaks found $LEAKS_COUNT potential secrets"
            SECRETS_FOUND=true
          fi
        fi
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo "Build failed due to detected secrets"
          exit 1
        fi
        
        echo "No secrets detected"

  # SR-4: Security Summary Report
  security-report:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, container-scan, secrets-scan]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# XORJ Quantitative Engine - Security Scan Summary" > security-summary.md
        echo "Date: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Static Application Security Testing (SAST)" >> security-summary.md
        if [ -d "bandit-results" ]; then
          echo "- ✅ Bandit scan completed" >> security-summary.md
        fi
        if [ -d "semgrep-results" ]; then
          echo "- ✅ Semgrep scan completed" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        echo "## Dependency Vulnerability Scanning" >> security-summary.md
        if [ -d "safety-results" ]; then
          echo "- ✅ Safety scan completed" >> security-summary.md
        fi
        if [ -d "pip-audit-results" ]; then
          echo "- ✅ pip-audit scan completed" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        echo "## Container Security" >> security-summary.md
        if [ -d "grype-results" ]; then
          echo "- ✅ Container vulnerability scan completed" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        echo "## Secrets Detection" >> security-summary.md
        if [ -d "secrets-scan-results" ]; then
          echo "- ✅ Secrets scan completed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Build Status" >> security-summary.md
        echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md