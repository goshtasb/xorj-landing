# XORJ Quantitative Engine - Production Zero Trust Configuration
# SR-1: Zero Trust Network - No public inbound ports, VPC-only access
version: '3.8'

services:
  # Main Application - Internal access only
  quantitative-engine:
    build:
      context: .
      dockerfile: Dockerfile.production
    # SR-1: NO public port exposure - internal network only
    expose:
      - "8000"  # Internal port only, not published to host
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs:/app/logs:rw
      - /dev/null:/app/app:ro  # Prevent code modification in production
    depends_on:
      - postgres
      - redis
      - secrets-manager
    restart: unless-stopped
    networks:
      - xorj-private-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1001:1001"  # Non-root user
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # PostgreSQL Database - Internal only
  postgres:
    image: postgres:15-alpine
    # SR-1: NO public port exposure
    expose:
      - "5432"  # Internal only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - xorj-private-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "999:999"  # postgres user
    environment:
      # SR-2: These will be replaced with secrets manager
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password

  # Redis for Task Queue - Internal only
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass-file /run/secrets/redis_password
    # SR-1: NO public port exposure
    expose:
      - "6379"  # Internal only
    volumes:
      - redis_data:/data
    networks:
      - xorj-private-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "999:999"  # redis user
    secrets:
      - redis_password

  # Celery Worker - Internal only
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    command: celery -A app.worker worker --loglevel=warning --concurrency=2
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      - postgres
      - redis
      - secrets-manager
    networks:
      - xorj-private-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1001:1001"
    cap_drop:
      - ALL

  # Celery Beat - Internal only
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    command: celery -A app.worker beat --loglevel=warning --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      - postgres
      - redis
      - secrets-manager
    networks:
      - xorj-private-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1001:1001"
    cap_drop:
      - ALL

  # SR-2: Secrets Manager Service
  secrets-manager:
    image: hashicorp/vault:1.15
    command: vault server -dev -dev-root-token-id="xorj-dev-token"
    # SR-1: Internal access only
    expose:
      - "8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=xorj-dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./security/vault-config.hcl:/vault/config/vault-config.hcl:ro
    networks:
      - xorj-private-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - IPC_LOCK

  # SR-3: Immutable Logging Service
  audit-logger:
    image: fluent/fluent-bit:2.2
    volumes:
      - ./logs:/logs:ro
      - ./security/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - xorj-private-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    user: "1001:1001"
    cap_drop:
      - ALL

  # Internal Load Balancer/Reverse Proxy (Nginx)
  # SR-1: Only this service has controlled external access via VPC
  internal-gateway:
    image: nginx:1.25-alpine
    volumes:
      - ./security/nginx-internal.conf:/etc/nginx/nginx.conf:ro
      - ./security/ssl:/etc/ssl/certs:ro
    # SR-1: This is the ONLY service with external access - secured via VPC
    ports:
      - "443:443"  # HTTPS only, secured by VPC/firewall rules
    depends_on:
      - quantitative-engine
    networks:
      - xorj-private-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=10m
    user: "101:101"  # nginx user
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

# SR-1: Private network with no external bridge access
networks:
  xorj-private-network:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local

# SR-2: Secrets managed externally (will be replaced with AWS Secrets Manager)
secrets:
  postgres_db:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true
  redis_password:
    external: true
  api_keys:
    external: true