import { Codec, Decoder, Encoder, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from './codec';
type AnyEncoder = Encoder<any>;
type AnyDecoder = Decoder<any>;
type AnyCodec = Codec<any>;
/**
 * Updates the size of a given encoder.
 *
 * This function modifies the size of an encoder using a provided transformation function.
 * For fixed-size encoders, it updates the `fixedSize` property, and for variable-size
 * encoders, it adjusts the size calculation based on the encoded value.
 *
 * If the new size is negative, an error will be thrown.
 *
 * For more details, see {@link resizeCodec}.
 *
 * @typeParam TFrom - The type of the value to encode.
 * @typeParam TSize - The original fixed size of the encoded value.
 * @typeParam TNewSize - The new fixed size after resizing.
 *
 * @param encoder - The encoder whose size will be updated.
 * @param resize - A function that takes the current size and returns the new size.
 * @returns A new encoder with the updated size.
 *
 * @example
 * Increasing the size of a `u16` encoder by 2 bytes.
 * ```ts
 * const encoder = resizeEncoder(getU16Encoder(), size => size + 2);
 * encoder.encode(0xffff); // 0xffff0000 (two extra bytes added)
 * ```
 *
 * @example
 * Shrinking a `u32` encoder to only use 2 bytes.
 * ```ts
 * const encoder = resizeEncoder(getU32Encoder(), () => 2);
 * encoder.fixedSize; // 2
 * ```
 *
 * @see {@link resizeCodec}
 * @see {@link resizeDecoder}
 */
export declare function resizeEncoder<TFrom, TSize extends number, TNewSize extends number>(encoder: FixedSizeEncoder<TFrom, TSize>, resize: (size: TSize) => TNewSize): FixedSizeEncoder<TFrom, TNewSize>;
export declare function resizeEncoder<T